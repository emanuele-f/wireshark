# Build options for use by CMake

option(BUILD_wireshark     "Build Wireshark" OFF)
option(BUILD_logray        "Build Logray" OFF)
if(BUILD_wireshark OR BUILD_logray)
	if(NOT DEFINED ENV{WIRESHARK_BUILD_WITH_QT5})
		option(USE_qt6     "Use Qt6 instead of Qt5" ON)
	else()
		option(USE_qt6     "Use Qt6 instead of Qt5" OFF)
	endif()
endif()
option(BUILD_tshark        "Build tshark" OFF)
option(BUILD_tfshark       "Build tfshark" OFF)
option(BUILD_rawshark      "Build rawshark" OFF)
option(BUILD_dumpcap       "Build dumpcap" OFF)
option(BUILD_text2pcap     "Build text2pcap" OFF)
option(BUILD_mergecap      "Build mergecap" OFF)
option(BUILD_reordercap    "Build reordercap" OFF)
option(BUILD_editcap       "Build editcap" OFF)
option(BUILD_capinfos      "Build capinfos" OFF)
option(BUILD_captype       "Build captype" OFF)
option(BUILD_randpkt       "Build randpkt" OFF)
option(BUILD_dftest        "Build dftest" OFF)
option(BUILD_corbaidl2wrs  "Build corbaidl2wrs" OFF)
option(BUILD_dcerpcidl2wrs "Build dcerpcidl2wrs" OFF)
option(BUILD_xxx2deb       "Build xxx2deb" OFF)

option(BUILD_androiddump   "Build androiddump" OFF)
option(BUILD_sshdump       "Build sshdump" OFF)
option(BUILD_ciscodump     "Build ciscodump" OFF)
option(BUILD_dpauxmon      "Build dpauxmon" OFF)
option(BUILD_randpktdump   "Build randpktdump" OFF)
option(BUILD_wifidump      "BUild wifidump" OFF)
if(WIN32 AND NOT MINGW)
	# XXX - I don't think building etwdump is possible with MinGW-w64 as of
	# version 9.0 but I would like to be 100% certain.
	option(BUILD_etwdump	   "Build etwdump" OFF)
else()
	option(BUILD_etwdump	   "Build etwdump" OFF)
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
	option(BUILD_sdjournal   "Build sdjournal" OFF)
else()
	option(BUILD_sdjournal   "Build sdjournal" OFF)
endif()
option(BUILD_udpdump       "Build udpdump" OFF)
option(BUILD_falcodump     "Build falcodump" OFF)

option(BUILD_sharkd        "Build sharkd" OFF)
option(BUILD_mmdbresolve   "Build MaxMind DB resolver" OFF)
option(BUILD_fuzzshark     "Build fuzzshark" OFF)

option(ENABLE_WERROR     "Treat warnings as errors" OFF)
option(ENABLE_DEBUG      "Enable debug code" OFF)
option(ENABLE_ASSERT     "Enable assertions" OFF)
option(ENABLE_DEBUG_MBS  "Enable extra debug checks for detecting invalid multibyte (UTF-8) strings" OFF)

option(ENABLE_CCACHE     "Speed up compiling and linking using ccache if possible" OFF)
option(DISABLE_FRAME_LARGER_THAN_WARNING "Disable warning if the size of a function frame is large" OFF)
option(EXTCAP_ANDROIDDUMP_LIBPCAP    "Build androiddump using libpcap" OFF)
option(ENABLE_EXTRA_COMPILER_WARNINGS "Do additional compiler warnings (disables -Werror)" OFF)
option(ENABLE_CODE_ANALYSIS "Enable the compiler's static analyzer if possible" OFF)
option(ENABLE_ASAN "Enable AddressSanitizer (ASAN) for debugging (degrades performance)" OFF)
option(ENABLE_TSAN "Enable ThreadSanitizer (TSan) for debugging" OFF)
option(ENABLE_UBSAN "Enable UndefinedBehaviorSanitizer (UBSan) for debugging" OFF)
option(ENABLE_FUZZER "Enable libFuzzer instrumentation for use with fuzzshark" OFF)
option(ENABLE_CHECKHF_CONFLICT "Enable hf conflict check for debugging (start-up may be slower)" OFF)

if(CMAKE_GENERATOR STREQUAL "Ninja")
	option(ENABLE_COMPILER_COLOR_DIAGNOSTICS "Always enable the compiler's color diagnostic output" OFF)
else()
	option(ENABLE_COMPILER_COLOR_DIAGNOSTICS "Always enable the compiler's color diagnostic output" OFF)
endif()

option(ENABLE_LTO "Use Link Time Optimization (release configuration only)" OFF)

if(WIN32)
	option(ENABLE_VLD "Enable Visual Leak Detect in Debug configuration" OFF)
endif()

option(ENABLE_PCAP       "Enable libpcap support (required for capturing)" OFF)
#
# AirPcap support is available only on Windows.  It might be nice to have it
# check whether the AirPcap SDK is available, and turn AirPcap support on
# only if it is.
#
if(WIN32)
	option(ENABLE_AIRPCAP    "Enable AirPcap support" OFF)
endif()
option(ENABLE_STATIC            "Build Wireshark libraries statically" OFF)
option(USE_STATIC               "Always link statically with external libraries" OFF)
option(ENABLE_PLUGINS           "Build with plugins" OFF)
option(ENABLE_PLUGIN_IFDEMO     "Build with plugin interface demo" OFF)

option(ENABLE_ZLIB       "Build with zlib compression support" OFF)
option(ENABLE_MINIZIP    "Build with zip file compression support" OFF)
option(ENABLE_LZ4        "Build with LZ4 compression support" OFF)
option(ENABLE_BROTLI     "Build with brotli compression support" OFF)
option(ENABLE_SNAPPY     "Build with Snappy compression support" OFF)
option(ENABLE_ZSTD       "Build with Facebook zstd compression support" OFF)
option(ENABLE_NGHTTP2    "Build with HTTP/2 header decompression support" OFF)
option(ENABLE_LUA        "Build with Lua dissector support" OFF)
option(ENABLE_SMI        "Build with libsmi snmp support" OFF)
option(ENABLE_GNUTLS     "Build with RSA decryption support" OFF)
if(WIN32)
	option(ENABLE_WINSPARKLE "Enable automatic updates using WinSparkle" OFF)
endif()
if (NOT WIN32)
	option(ENABLE_CAP        "Build with Posix capabilities support" OFF)
endif()
if(UNIX)
	# Libnl is Linux-specific.
	if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
		set(_enable_libnl ON)
	endif()
	option(ENABLE_NETLINK    "Build with libnl support" ${_enable_libnl})
endif()
option(ENABLE_KERBEROS   "Build with Kerberos support" OFF)
option(ENABLE_SBC        "Build with SBC Codec support in RTP Player" OFF)
option(ENABLE_SPANDSP    "Build with G.722/G.726 codecs support in RTP Player" OFF)
option(ENABLE_BCG729     "Build with G.729 codec support in RTP Player" OFF)
option(ENABLE_ILBC       "Build with iLBC codec support in RTP Player" OFF)
option(ENABLE_LIBXML2    "Build with libxml2 support" OFF)
option(ENABLE_OPUS       "Build with opus support" OFF)
option(ENABLE_SINSP      "Build with libsinsp+libscap support" OFF)

# How to install
set(DUMPCAP_INSTALL_OPTION   "normal" CACHE STRING "Permissions to install")
set_property(CACHE DUMPCAP_INSTALL_OPTION PROPERTY STRINGS "normal" "suid" "capabilities")

if(UNIX)
	option(ENABLE_DUMPCAP_GROUP "Install dumpcap with group ownership and permissions (default \"wireshark\")" OFF)
	set(DUMPCAP_INSTALL_GROUP "wireshark" CACHE STRING "Group name for dumpcap (must exist)")
endif()

if(APPLE)
	option(ENABLE_APPLICATION_BUNDLE "Build a macOS application bundle (Wireshark.app)" OFF)
	option(ENABLE_SPARKLE "Enable automatic updates using Sparkle" OFF)
endif()
